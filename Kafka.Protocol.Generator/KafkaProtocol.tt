<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension=".cs.generated" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Text.RegularExpressions" #>
<#@ assembly name="$(SolutionDir)\Kafka.Protocol.Generator.Helpers\bin\Debug\netstandard2.0\Kafka.Protocol.Generator.Helpers.dll" #>
<#@ assembly name="$(SolutionDir)\Kafka.Protocol.Generator.Transformation\bin\Debug\net48\Kafka.Protocol.Generator.Transformation.dll" #>
<#@ assembly name="$(NuGetPackageRoot)\htmlagilitypack\1.11.15\lib\netstandard2.0\HtmlAgilityPack.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="HtmlAgilityPack" #>
<#@ import namespace="Kafka.Protocol.Generator.Transformation" #>
<#@ import namespace="Kafka.Protocol.Generator.Helpers" #>
<#@ import namespace="Kafka.Protocol.Generator.Helpers.Definitions" #>
<#@ import namespace="Kafka.Protocol.Generator.Helpers.Extensions" #>
<#@ import namespace="Kafka.Protocol.Generator.Helpers.Definitions.Messages" #>
<#
    var path = Path.Combine(Host.ResolvePath(@"ProtocolSpecifications\Apache Kafka.html"));
    var apacheKafkaDefinitionPage = new HtmlDocument();
    apacheKafkaDefinitionPage.LoadHtml(File.ReadAllText(path));

    var protocol = ProtocolSpecification.Load(apacheKafkaDefinitionPage);

	var messageDefinitionPath = Path.Combine(Host.ResolvePath(@"..\Kafka.Protocol.MessageDefinitionsDownloader\MessageDefinitions\"));
	var messageDefinitions = JsonFileLoader.LoadFrom<Message>(messageDefinitionPath).AddReferencesToFields();

	void Tab(Action action) { this.Tab(action); }
    void Block(Action action) { this.Block(action); }
	void PrintOnNewRowForEach<TValue>(IEnumerable<TValue> iterator, Action<TValue> action) { this.PrintOnNewRowForEach(iterator, action); }
	void PrintOnNewRowForEachWithIndex<TValue>(IEnumerable<TValue> iterator, ActionDelegateWithIndexAndLength<TValue> action) { this.PrintOnNewRowForEach(iterator, action); }
	void LF(int count = 1) { this.WriteNewLine(count); }
	void GenerateDocumentation(params string[] documentations) { this.GenerateDocumentation(documentations); }

	var primitiveTypeNames = protocol.PrimitiveTypes.Values
		.Select(type => type.GetClassName());
	FieldExtensions.SetPrimitiveTypeNames(primitiveTypeNames.ToArray());	
#>
