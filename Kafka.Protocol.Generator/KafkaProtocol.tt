<#@ template language="C#" debug="true" hostspecific="true" #>
<#@ output extension=".cs.generated" #>
<#@ assembly name="netstandard" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Text.RegularExpressions" #>
<#@ assembly name="$(SolutionDir)\Kafka.Protocol.Generator.Helpers\bin\Debug\netstandard2.0\Kafka.Protocol.Generator.Helpers.dll" #>
<#@ assembly name="$(SolutionDir)\Kafka.Protocol.Generator.Transformation\bin\Debug\net48\Kafka.Protocol.Generator.Transformation.dll" #>
<#@ assembly name="$(NuGetPackageRoot)\htmlagilitypack\1.11.15\lib\netstandard2.0\HtmlAgilityPack.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="HtmlAgilityPack" #>
<#@ import namespace="Kafka.Protocol.Generator.Transformation" #>
<#@ import namespace="Kafka.Protocol.Generator.Helpers" #>
<#@ import namespace="Kafka.Protocol.Generator.Helpers.Definitions" #>
<#@ import namespace="Kafka.Protocol.Generator.Helpers.Extensions" #>
<#@ import namespace="Kafka.Protocol.Generator.Helpers.Definitions.Messages" #>
<#
    var path = Path.Combine(Host.ResolvePath(@"ProtocolSpecifications\Apache Kafka.html"));
    var apacheKafkaDefinitionPage = new HtmlDocument();
    apacheKafkaDefinitionPage.LoadHtml(File.ReadAllText(path));

    var protocol = ProtocolSpecification.Load(apacheKafkaDefinitionPage);

	var messageDefinitionPath = Path.Combine(Host.ResolvePath(@"..\Kafka.Protocol.MessageDefinitionsDownloader\MessageDefinitions\"));
	var messageDefinitions = JsonFileLoader.LoadFrom<Message>(messageDefinitionPath).AddReferencesToFields();

	void Tab(Action action) { this.Tab(action); }
    void Block(Action action) { this.Block(action); }
	void PrintOnNewRowForEach<TValue>(IEnumerable<TValue> iterator, Action<TValue> action) { this.PrintOnNewRowForEach(iterator, action); }
	void PrintOnNewRowForEachWithIndex<TValue>(IEnumerable<TValue> iterator, ActionDelegateWithIndexAndLength<TValue> action) { this.PrintOnNewRowForEach(iterator, action); }
	void _(int count = 1) { this.WriteNewLine(count); }
	void GenerateDocumentation(params string[] documentations) { this.GenerateDocumentation(documentations); }

	var primitiveTypeNames = protocol.PrimitiveTypes.Values
		.Select(type => type.GetClassName());

	bool IsPrimitiveType(Kafka.Protocol.Generator.Helpers.Definitions.Messages.Field field)
	{
		var typeName = field.GetFullTypeNameWithoutArrayCharacters();
		return primitiveTypeNames
			.Any(primitiveTypeName => 
				typeName == primitiveTypeName);
	}
#>
// WARNING! THIS FILE IS AUTO-GENERATED! DO NOT EDIT.
using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Pipelines;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Kafka.Protocol.Records;
// ReSharper disable MemberHidesStaticFromOuterClass FromReaderAsync will cause a lot of these warnings
namespace Kafka.Protocol<# Block(() =>
{
	// Primitive types
    PrintOnNewRowForEach(protocol.PrimitiveTypes.Values, primitiveType =>
    {
        var className = primitiveType.GetClassName();
		var classNameWithoutGenerics = className.Split('<').First();
        var type = primitiveType.GetTypeName();
		var defaultValue = primitiveType.GetDefaultValue();
		var isNullable = primitiveType.IsNullable();
		var @params = primitiveType.IsArray() ? "params " : "";
		var genericConstraints = primitiveType.GetGenericArgumentConstraints();

        GenerateDocumentation(primitiveType.Description);
        #>public readonly partial struct <#= className #> : ISerialize <# 
		PrintOnNewRowForEachWithIndex(genericConstraints, (constraint, index, count) =>
		{
			if (index == 0) _();
		#>	where <#= constraint.Key #> : <#= constraint.Value #><#
		});
		Block(() =>
        {
            #>public <#= type #> Value { get; }<# _(2);

            #>public <#= classNameWithoutGenerics #>(<#= @params #><#= type #> value)<# Block(() =>
            {
                #>Value = value;<#
            }); _(2);

			#>public override bool Equals(object obj) <# Block(() =>
            {
                #>return obj is <#= className #> comparing<#= classNameWithoutGenerics #> && this == comparing<#= classNameWithoutGenerics #>;<#
            }); _(2);

			#>public override int GetHashCode() <# Block(() => 
			{
                if (isNullable)
                {
                    #>return Value?.GetHashCode() ?? 0;<#
                } 
                else 
                {
                    #>return Value.GetHashCode();<#
                }
			}); _(2);

			#>public override string ToString() <# Block(() => 
			{
				if (isNullable)
                {
                    #>return Value?.ToString() ?? string.Empty;<#
                } 
                else 
                {
                    #>return Value.ToString();<#
                }                
			}); _(2);

			#>public static bool operator == (<#= className #> x, <#= className #> y)<# Block(() => 
			{
				#>return x.Value == y.Value;<#
			}); _(2);

			#>public static bool operator != (<#= className #> x, <#= className #> y)<# Block(() =>
            {
                #>return !(x == y);<#
            }); _(2);

			#>public static implicit operator <#= type #>(<#= className #> value) => value.Value;<# _(2);

			#>public static implicit operator <#= className #>(<#= type #> value) => From(value);<# _(2);

			if (isNullable)
			{
				var nonNullableType = className.TrimStart("Nullable".ToCharArray());
				var nullableType = nonNullableType + "?";
				#>public static implicit operator <#= nullableType #>(<#= className #> value) =><# _();
				#>	value.Value == null ? null as <#= nullableType #> : <#= nonNullableType #>.From(value.Value);<# _(2);

				#>public static implicit operator <#= className #>(<#= nullableType #> value) =><# _();
				#>	From(value?.Value);<# _(2);
			}

			#>int ISerialize.GetSize(bool asCompact) => GetSize(asCompact);<# _(2);

			#>ValueTask ISerialize.WriteToAsync(Stream writer, bool asCompact, CancellationToken cancellationToken) => WriteToAsync(writer, asCompact, cancellationToken);<# _(2);

			#>public static <#= className #> From(<#= @params #><#= type #> value)<# Block(() =>
            {
                #>return new <#= className #>(value);<#
            }); _(2);

			#>public static <#= className #> Default { get; } = From(<#= defaultValue #>);<#
        }); _(2);
    });

	// Exceptions
    PrintOnNewRowForEachWithIndex(protocol.ErrorCodes.Values, (errorCode, index, count) =>
    {
        var exceptionName = errorCode.Error.ToPascalCase('_');
        GenerateDocumentation(errorCode.Description);
        #>public class <#= exceptionName #>Exception : Exception<# Block(() =>
        {
			#>public <#= exceptionName #>Exception()<# Block(() =>
			{
			}); _(2);

            #>public <#= exceptionName #>Exception(string message) : base(message)<# Block(() =>
			{
			}); _(2);

			#>public int Code => <#= errorCode.Code #>;<# 
        });

		if (index + 1 != count) _();
    }); _(2);

	#>public static class Messages <# Block(() =>
    {
		#>public static async ValueTask<Message> CreateRequestMessageFromReaderAsync(<# _();
		#>	Int16 apiKey, <# _();
		#>	Int16 version, <# _();
		#>	PipeReader reader, <# _();
		#>	CancellationToken cancellationToken = default)<# Block(() =>
		{
			PrintOnNewRowForEach(messageDefinitions.Where(MessageExtensions.IsRequest), messageDefinition =>
			{
				#>if (<#= messageDefinition.Name #>.ApiKey == apiKey)<# Block(() =>
				{
					#>return await <#= messageDefinition.Name #>.FromReaderAsync(version, reader, cancellationToken).ConfigureAwait(false);<#
				}); _();
			}); _();

			#>throw new ArgumentException($"{apiKey} is not supported");<#
		}); _(2);

		#>public static async ValueTask<Message> CreateResponseMessageFromReaderAsync(<# _();
		#>	Int16 apiKey, <# _();
		#>	Int16 version, <# _();
		#>	PipeReader reader, <# _();
		#>	CancellationToken cancellationToken = default)<# Block(() =>
		{
			PrintOnNewRowForEach(messageDefinitions.Where(MessageExtensions.IsResponse), messageDefinition =>
			{
				#>if (<#= messageDefinition.Name #>.ApiKey == apiKey)<# Block(() =>
				{
					#>return await <#= messageDefinition.Name #>.FromReaderAsync(version, reader, cancellationToken).ConfigureAwait(false);<#
				}); _();
			}); _();

			#>throw new ArgumentException($"{apiKey} is not supported");<#
		});

	}); _(2);
	
	// Messages
	PrintOnNewRowForEach(messageDefinitions, messageDefinition =>
	{
		var hasResponse = messageDefinitions.TryGetResponseMessageDefinitionFrom(messageDefinition, out var responseMessageDefinition);
		var versionRange = VersionRange.Parse(messageDefinition.ValidVersions);
		var flexibleVersionRange = VersionRange.Parse(messageDefinition.FlexibleVersions);

		#>public class <#= messageDefinition.Name #> : Message<#= hasResponse ? $", IRespond<{responseMessageDefinition.Name}>" : "" #><# Block(() => 
		{
			#>public <#= messageDefinition.Name #>(Int16 version)<# Block(() => 
			{
				#>if (version.InRange(MinVersion, MaxVersion) == false) <# Block(() => 
				{
					#>throw new UnsupportedVersionException($"<#= messageDefinition.Name #> does not support version {version}. Valid versions are: <#= messageDefinition.ValidVersions #>");<#
				}); _(2);

				 #>Version = version;<# _();
				 #>IsFlexibleVersion = version.InRange(<#= flexibleVersionRange.From #>, <#= flexibleVersionRange.To #>);<#
			}); _(2);

			#>public static readonly Int16 ApiKey = Int16.From(<#= messageDefinition.ApiKey #>);<# _(2);

			#>public static readonly Int16 MinVersion = Int16.From(<#= versionRange.From #>);<# _();
			#>public static readonly Int16 MaxVersion = Int16.From(<#= versionRange.To #>);<# _(2);

			#>public override Int16 Version { get; }<# _(1);
			#>internal bool IsFlexibleVersion { get; }<# _(2);

			#>internal override int GetSize() =><# _();
			PrintOnNewRowForEachWithIndex(messageDefinition.Fields, (messageField, messageFieldIndex, messageFieldCount) => 
			{
				PrintSizeOf(messageField);
				if (messageFieldIndex + 1 != messageFieldCount)	#> +<# else #>;<#
			}); _(2);

			#>internal static async ValueTask<<#= messageDefinition.Name #>> FromReaderAsync(Int16 version, PipeReader reader, CancellationToken cancellationToken = default)<# Block(() => 
			{
				#>var instance = new <#= messageDefinition.Name #>(version);<# _();
				
				messageDefinition.Fields.ForEach(messageField => 
				{
					PrintReadField(messageField);
				}); _();

				PrintReadTags(messageDefinition.GetTaggedFields(), messageDefinition.Name);

				if (messageDefinition.Fields.Any())
				{
					#>return instance;<#
				}
				else 
				{
					#>return await new ValueTask<<#= messageDefinition.Name #>>(instance);<#
				}
			}); _(2);

			#>internal override async ValueTask WriteToAsync(Stream writer, CancellationToken cancellationToken = default)<# Block(() => 
			{
				if (messageDefinition.Fields.Any() == false)
				{
					#>await Task.CompletedTask;<#
				}

				messageDefinition.Fields.ForEach(messageField => 
				{
					PrintWriteTo(messageField);
				}); _();

				PrintWriteTags(messageDefinition.GetTaggedFields());
			}); if (messageDefinition.Fields.Any()) _(2);

			PrintOnNewRowForEachWithIndex(messageDefinition.Fields, (messageField, messageFieldIndex, messageFieldCount) =>
			{
				PrintField(messageField, messageDefinition.Name);
				if (messageFieldIndex + 1 != messageFieldCount) _();
			});

			if (messageDefinition.CommonStructs != null)
			{
				_(2);
				PrintOnNewRowForEachWithIndex(messageDefinition.CommonStructs, (commonStruct, commonStructIndex, commonStructCount) =>
				{
					PrintCommonStruct(commonStruct);
					if (commonStructIndex + 1 != commonStructCount) _();
				});
			}

			if (hasResponse)
			{
				_(2);
				#>public <#= responseMessageDefinition.Name #> Respond()<# _();
				#>	=> new <#= responseMessageDefinition.Name #>(Version);<#
			}
		}); _();
	}); _();
	
	#>public static class ResponseExtensions<# Block(() => 
	{
		#>public static ApiVersionsResponse WithAllApiKeys(this ApiVersionsResponse response)<# Block(() => 
		{
			if (messageDefinitions.Any()) 
			{
				#>return response.WithApiKeysCollection(<# _();
				PrintOnNewRowForEachWithIndex(messageDefinitions.Where(MessageExtensions.IsRequest), (messageDefinition, index, count) =>
				{
					#>	key => key<# _();
					#>		.WithApiKey(<#= messageDefinition.Name #>.ApiKey)<# _();
					#>		.WithMinVersion(<#= messageDefinition.Name #>.MinVersion)<# _();
					#>		.WithMaxVersion(<#= messageDefinition.Name #>.MaxVersion)<#

					if (index + 1 < count) 
					{
						#>,<#
					}
				});
				#>);<#
			}		
		});
	});
});

void PrintSizeOf(Kafka.Protocol.Generator.Helpers.Definitions.Messages.Field messageField)
{
	var versionRange = VersionRange.Parse(messageField.Versions);
	var propertyName = messageField.GetPropertyName();

	#>	(Version.InRange(<#= versionRange.From #>, <#= versionRange.To #>) ? <# _();
	#>		<#= propertyName #>.GetSize(IsFlexibleVersion) :<# _();
	#>		0)<#
}

void PrintReadField(Kafka.Protocol.Generator.Helpers.Definitions.Messages.Field messageField)
{
	var versionRange = VersionRange.Parse(messageField.Versions);
	if (messageField.TaggedVersions != null)
	{
		var taggedVersionRange = VersionRange.Parse(messageField.TaggedVersions);
		if (taggedVersionRange.From == versionRange.From)
		{
			return;
		}
		versionRange = new VersionRange(versionRange.From, taggedVersionRange.From - 1);
	}

	PrintRead(messageField, versionRange); _();
}

void PrintReadTag(Kafka.Protocol.Generator.Helpers.Definitions.Messages.Field messageField)
{
	var parentFieldTypeName = messageField.Parent?.GetFullTypeNameWithoutArrayCharacters() ?? "";
	var fieldName = messageField.GetFieldName(parentFieldTypeName);

	var versionRange = messageField.TaggedVersions == null ? 
		VersionRange.Parse(messageField.Versions) : 
		VersionRange.Parse(messageField.TaggedVersions);
	
	PrintRead(messageField, versionRange); _();
	#>else<# _();
	#>	throw new InvalidOperationException($"Field <#= fieldName #> is not supported for version {instance.Version}");<#
}

void PrintRead(Kafka.Protocol.Generator.Helpers.Definitions.Messages.Field messageField, VersionRange versionRange)
{
	var parentFieldTypeName = messageField.Parent?.GetFullTypeNameWithoutArrayCharacters() ?? "";
	var fieldName = messageField.GetFieldName(parentFieldTypeName);
	#>if (instance.Version.InRange(<#= versionRange.From #>, <#= versionRange.To #>)) <# _(); Tab(() => 
	{
		var fieldTypeName = messageField.GetTypeName();
		var fieldTypeNameWithoutArrayCharacters = messageField.GetFullTypeNameWithoutArrayCharacters();
		var nullable = messageField.IsNullable() ? "Nullable" : "";
		var nullableSign = messageField.IsNullable() ? "?" : "";

		#>instance.<#= fieldName #> = <# 
		if (messageField.Fields == null)
		{
			if (messageField.IsArray())
			{
				if (IsPrimitiveType(messageField))
				{
					#>await <#= fieldTypeName #>.FromReaderAsync(reader, instance.IsFlexibleVersion, () => <#= fieldTypeNameWithoutArrayCharacters #>.FromReaderAsync(reader, instance.IsFlexibleVersion, cancellationToken), cancellationToken).ConfigureAwait(false);<# 	
				} 
				else 
				{
					#>await <#= fieldTypeName #>.FromReaderAsync(reader, instance.IsFlexibleVersion, () => <#= fieldTypeNameWithoutArrayCharacters #>.FromReaderAsync(instance.Version, reader, cancellationToken), cancellationToken).ConfigureAwait(false);<# 	
				}
			} 
			else 
			{
				#>await <#= fieldTypeName #>.FromReaderAsync(reader, instance.IsFlexibleVersion, cancellationToken).ConfigureAwait(false);<# 
			}
		}
		else 
		{
			if (messageField.IsArray())
			{
				var mapKeyField = messageField.Fields.FirstOrDefault(field => field.MapKey);
				if (mapKeyField == null)
				{
					#>await <#= fieldTypeName #>.FromReaderAsync(reader, instance.IsFlexibleVersion, () => <#= fieldTypeNameWithoutArrayCharacters #>.FromReaderAsync(instance.Version, reader, cancellationToken), cancellationToken).ConfigureAwait(false);<# 
				}
				else 
				{
					#>await <#= fieldTypeName #>.FromReaderAsync(reader, instance.IsFlexibleVersion, () => <#= fieldTypeNameWithoutArrayCharacters #>.FromReaderAsync(instance.Version, reader, cancellationToken), field => field.<#= mapKeyField.GetName() #>, cancellationToken).ConfigureAwait(false);<# 
				}
			} 
			else 
			{
				#>await <#= fieldTypeName #>.FromReaderAsync(instance.Version, reader, cancellationToken).ConfigureAwait(false);<# 
			}
		}
	});
}

void PrintReadTags(IEnumerable<Kafka.Protocol.Generator.Helpers.Definitions.Messages.Field> taggedFields, string parentType)
{
	#>if (instance.IsFlexibleVersion)<# Block(() =>
	{
		#>var tagSection = await Tags.TagSection.FromReaderAsync(reader, cancellationToken).ConfigureAwait(false);<# _();
		#>await foreach (var tag in tagSection.WithCancellation(cancellationToken).ConfigureAwait(false))<# Block(() => 
		{
			#>switch (tag.Tag)<# Block(() => 
			{
				PrintOnNewRowForEach(taggedFields, taggedField => 
				{
				#>case <#= taggedField.Tag #>:<# _();
					Tab(() =>
					{
						PrintReadTag(taggedField); 
						var propertyName = taggedField.GetPropertyName();
						var parentFieldTypeName = taggedField.Parent?.GetFullTypeNameWithoutArrayCharacters() ?? "";
						var fieldName = taggedField.GetFieldName(parentFieldTypeName);

						Block(() => 
						{
							#>var size = instance.<#= propertyName #>.GetSize(true);<# _();
							#>if (size != tag.Length)<# _();
							#>	throw new CorruptMessageException($"Tagged field <#= fieldName #> read length {tag.Length} but had actual length of {size}");<# 
						}); _();
					});
				#>	break;<# _();
				}); 
				#>default:<# _();
				#>	throw new InvalidOperationException($"Tag '{tag.Tag}' for <#= parentType #> is unknown");<# 
			});
		}); 
	}); _(2);
}

void PrintWriteTags(IEnumerable<Kafka.Protocol.Generator.Helpers.Definitions.Messages.Field> taggedFields)
{
	#>if (IsFlexibleVersion)<# Block(() =>
	{
		var tagsExpression = "";
		if (taggedFields.Any())
		{	
			tagsExpression = "tags.ToArray()";
			#>var tags = new List<Tags.TaggedField>();<# _();
			PrintOnNewRowForEachWithIndex(taggedFields, (taggedField, index, count) =>
			{			
				var propertyName = taggedField.GetPropertyName();
				var versionRange = taggedField.TaggedVersions == null ? 
					VersionRange.Parse(taggedField.Versions) : 
					VersionRange.Parse(taggedField.TaggedVersions);
				#>if (Version.InRange(<#= versionRange.From #>, <#= versionRange.To #>)) <# _(); Tab(() => 
				{
					#>tags.Add(new Tags.TaggedField<# Block(() => 
					{
						#>Tag = <#= taggedField.Tag #>,<# _();
						#>Field = <#= propertyName #><# 
					});#>);<# 
				});						
			}); _();
		}
		#>await new Tags.TagSection(<#= tagsExpression #>).WriteToAsync(writer, cancellationToken).ConfigureAwait(false);<#		
	}); 
}

void PrintWriteTo(Kafka.Protocol.Generator.Helpers.Definitions.Messages.Field messageField)
{
	var versionRange = VersionRange.Parse(messageField.Versions);
	if (messageField.TaggedVersions != null)
	{
		var taggedVersionRange = VersionRange.Parse(messageField.TaggedVersions);
		if (taggedVersionRange.From == versionRange.From)
		{
			return;
		}
		versionRange = new VersionRange(versionRange.From, taggedVersionRange.From - 1);
	}

	var propertyName = messageField.GetPropertyName();
	#>if (Version.InRange(<#= versionRange.From #>, <#= versionRange.To #>))<# _(); Tab(() => 
	{
		#>await <#= propertyName #>.WriteToAsync(writer, IsFlexibleVersion, cancellationToken).ConfigureAwait(false);<# 	
	});	_();
}

void PrintField(Kafka.Protocol.Generator.Helpers.Definitions.Messages.Field field, string className)
{
	var propertyTypeName = field.GetFullTypeName();
	var fieldTypeNameWithoutArrayCharacters = field.GetFullTypeNameWithoutArrayCharacters();
	var fieldTypeName = field.GetNullableFullTypeName();
	var propertyName = field.GetPropertyName();
	var fieldName = field.GetFieldName(className);
	var flexibleVersionRange = VersionRange.Parse(field.Message.FlexibleVersions);
	
	#>private <#= propertyTypeName #> <#= propertyName #><#
	
	if(field.Default != null) 
	{ 
		#> = new <#= propertyTypeName #>(<#= field.Default #>);<# 
	} 
	else if (field.IsDictionary())
	{
		#> = new <#= propertyTypeName #>();<# 
	}
	else if (field.IsArray())
	{
		#> = Array.Empty<<#= fieldTypeNameWithoutArrayCharacters #>>();<# 
	}
	else 
	{
		if (IsPrimitiveType(field))
		{
			#> = <#= propertyTypeName #>.Default<# 
		}
		else 
		{
			#> = default!<# 
		}
		#>;<#
	} _();

	GenerateFieldDocumentation();
	#>public <#= fieldTypeName #> <#= fieldName #> <# Block(() => 
	{
		#>get => <#= propertyName #>;<# _();
		#>private set <# Block(() => 
		{
			if (field.Ignorable == false)
			{
				var versionRange = VersionRange.Parse(field.Versions);
				#>if (Version.InRange(<#= versionRange.From #>, <#= versionRange.To #>) == false) <# _(); Tab(() => 
				{
					#>throw new UnsupportedVersionException($"<#= fieldName #> does not support version {Version} and has been defined as not ignorable. Supported versions: <#= field.Versions #>");<#
				}); _(2);
			}

			if (field.IsNullable())
			{
				var nullableVersionRange = VersionRange.Parse(field.NullableVersions);
				#>if (Version.InRange(<#= nullableVersionRange.From #>, <#= nullableVersionRange.To #>) == false &&<# _();
				#>	value == null) <# _(); Tab(() => 
				{					
					#>throw new UnsupportedVersionException($"<#= fieldName #> does not support null for version {Version}. Supported versions for null value: <#= field.NullableVersions #>");<#
				}); _(2);
			} 
			
			#><#= propertyName #> = value;<# 
		});
	}); _(2); 
	
	GenerateFieldDocumentation();
	if (field.Fields == null) 
	{
		var argumentName = field.GetName().FirstCharacterToLowerCase();
		#>public <#= className #> With<#= fieldName #>(<#= fieldTypeName #> <#= argumentName #>)<# Block(() => 
		{
			#><#= fieldName #> = <#= argumentName #>;<# _();
			#>return this;<#
		}); 

		return;
	} 

	if (field.TryGetMapKeyField(out var mapKeyField))
	{
		#>public <#= className #> With<#= fieldName #>(params Func<<#= fieldTypeNameWithoutArrayCharacters #>, <#= fieldTypeNameWithoutArrayCharacters #>>[] createFields)<# Block(() => 
		{
			var mapKeyNullConversion = mapKeyField.IsNullable() ? $"({mapKeyField.GetFullTypeName()})" : "";
			#><#= fieldName #> = createFields<# _();
			#>	.Select(createField => createField(Create<#= fieldTypeNameWithoutArrayCharacters #>()))<# _();
			#>	.ToDictionary(field => <#= mapKeyNullConversion #>field.<#= mapKeyField.GetName() #>);<# _();
			#>return this;<#
		}); _(2);
	}
	else if (field.IsArray())
	{
		#>public <#= className #> With<#= fieldName #>(params Func<<#= fieldTypeNameWithoutArrayCharacters #>, <#= fieldTypeNameWithoutArrayCharacters #>>[] createFields)<# Block(() => 
		{
			#><#= fieldName #> = createFields<# _();
			#>	.Select(createField => createField(Create<#= fieldTypeNameWithoutArrayCharacters #>()))<# _();
			#>	.ToArray();<# _();
			#>return this;<#
		}); _(2);
	}
	else 
	{
		#>public <#= className #> With<#= fieldName #>(Func<<#= fieldTypeName #>, <#= fieldTypeName #>> createField)<# Block(() => 
		{
			#><#= fieldName #> = createField(Create<#= fieldTypeName #>());<# _();
			#>return this;<#
		}); _(2);
	}
	
	#>internal <#= fieldTypeNameWithoutArrayCharacters #> Create<#= fieldTypeNameWithoutArrayCharacters #>()<# Block(() => 
	{
		#>return new <#= fieldTypeNameWithoutArrayCharacters #>(Version);<#
	}); _(2);

	#>public class <#= fieldTypeNameWithoutArrayCharacters #> : ISerialize<# Block(() => 
	{
		#>internal <#= fieldTypeNameWithoutArrayCharacters #>(Int16 version)<# Block(() => 
		{
			#>Version = version;<# _();
			#>IsFlexibleVersion = version.InRange(<#= flexibleVersionRange.From #>, <#= flexibleVersionRange.To #>);<#
		}); _(2);

		#>internal Int16 Version { get; }<# _();
		#>internal bool IsFlexibleVersion { get; }<# _(2);

		#>int ISerialize.GetSize(bool asCompact) => GetSize(asCompact);<# _();
		#>internal int GetSize(bool _) =><# _();
		PrintOnNewRowForEachWithIndex(field.Fields, (messageField, messageFieldIndex, messageFieldCount) => 
		{
			PrintSizeOf(messageField);
			if (messageFieldIndex + 1 != messageFieldCount)	#> +<# else #>;<#
		}); _(2);

		#>internal static async ValueTask<<#= fieldTypeNameWithoutArrayCharacters #>> FromReaderAsync(Int16 version, PipeReader reader, CancellationToken cancellationToken = default)<# Block(() => 
		{
			#>var instance = new <#= fieldTypeNameWithoutArrayCharacters #>(version);<# _();			
			field.Fields.ForEach(messageField => 
			{
				PrintReadField(messageField);
			}); _();

			PrintReadTags(field.GetTaggedFields(), fieldTypeNameWithoutArrayCharacters);

			#>return instance;<# 
		}); _(2);

		#>ValueTask ISerialize.WriteToAsync(Stream writer, bool asCompact, CancellationToken cancellationToken) => WriteToAsync(writer, asCompact, cancellationToken);<# _();
		#>internal async ValueTask WriteToAsync(Stream writer, bool _, CancellationToken cancellationToken = default)<# Block(() => 
		{
			field.Fields.ForEach(messageField => 
			{
				PrintWriteTo(messageField);
			}); _();

			PrintWriteTags(field.GetTaggedFields());
		}); _(2);

		PrintOnNewRowForEachWithIndex(field.Fields, (nestedField, index, count) =>
		{
			PrintField(nestedField, fieldTypeNameWithoutArrayCharacters); 
			if (index + 1 != count) _();
		});					
	});

	void GenerateFieldDocumentation()
	{
		GenerateDocumentation(
			field.About,
			$"Versions: {field.Versions}",
			(field.Default == null ? 
				"" : 
				$"Default: {(field.Default == String.Empty ? "Empty string" : field.Default)}"
		));
	}
}

void PrintCommonStruct(Kafka.Protocol.Generator.Helpers.Definitions.Messages.CommonStruct commonStruct)
{
	var versionRange = VersionRange.Parse(commonStruct.Versions);
	var flexibleVersionRange = VersionRange.Parse(commonStruct.Message.FlexibleVersions);

	#>public class <#= commonStruct.Name #> : ISerialize<# Block(() => 
	{
		#>internal <#= commonStruct.Name #>(Int16 version)<# Block(() => 
		{
			#>if (version.InRange(<#= versionRange.From #>, <#= versionRange.To #>) == false) <# Block(() => 
			{
				#>throw new UnsupportedVersionException($"<#= commonStruct.Name #> does not support version {version}. Valid versions are: <#= commonStruct.Versions #>");<#
			}); _(2);

			#>Version = version;<# _();
			#>IsFlexibleVersion = version.InRange(<#= flexibleVersionRange.From #>, <#= flexibleVersionRange.To #>);<#
		}); _(2);

		#>internal Int16 Version { get; }<# _();
		#>internal bool IsFlexibleVersion { get; }<# _(2);

		#>int ISerialize.GetSize(bool asCompact) => GetSize(asCompact);<# _();
		#>internal int GetSize(bool _) =><# _();
		PrintOnNewRowForEachWithIndex(commonStruct.Fields, (messageField, messageFieldIndex, messageFieldCount) => 
		{
			PrintSizeOf(messageField);
			if (messageFieldIndex + 1 != messageFieldCount)	#> +<# else #>;<#
		}); _(2);

		#>internal static async ValueTask<<#= commonStruct.Name #>> FromReaderAsync(Int16 version, PipeReader reader, CancellationToken cancellationToken = default)<# Block(() => 
		{
			#>var instance = new <#= commonStruct.Name #>(version);<# _();
			commonStruct.Fields.ForEach(messageField => 
			{
				PrintReadField(messageField);
			}); _();
			
			PrintReadTags(commonStruct.GetTaggedFields(), commonStruct.Name);

			#>return instance;<#
		}); _(2);

		#>ValueTask ISerialize.WriteToAsync(Stream writer, bool asCompact, CancellationToken cancellationToken) => WriteToAsync(writer, asCompact, cancellationToken);<# _();
		#>internal async ValueTask WriteToAsync(Stream writer, bool _, CancellationToken cancellationToken = default)<# Block(() => 
		{
			commonStruct.Fields.ForEach(field => 
			{
				PrintWriteTo(field);
			}); _();

			PrintWriteTags(commonStruct.GetTaggedFields());
		}); _(2);

		PrintOnNewRowForEachWithIndex(commonStruct.Fields, (field, index, count) =>
		{
			PrintField(field, commonStruct.Name); 
			if (index + 1 != count) _();
		});					
	});	
}
#>