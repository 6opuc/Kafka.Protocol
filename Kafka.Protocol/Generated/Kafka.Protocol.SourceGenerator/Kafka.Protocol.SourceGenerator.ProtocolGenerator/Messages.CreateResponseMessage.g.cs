// WARNING! THIS FILE IS AUTO-GENERATED! DO NOT EDIT.
using System.IO.Pipelines;
using System.Threading;
using System.Threading.Tasks;

namespace Kafka.Protocol
{
    public static partial class Messages
    {
        public static ValueTask<Message> CreateResponseMessageFromReaderAsync(Int16 apiKey, Int16 version, PipeReader reader, CancellationToken cancellationToken = default)
        {
            if (AddOffsetsToTxnResponse.ApiKey == apiKey)
                return AddOffsetsToTxnResponse.FromReaderAsync(version, reader, cancellationToken);
            if (AddPartitionsToTxnResponse.ApiKey == apiKey)
                return AddPartitionsToTxnResponse.FromReaderAsync(version, reader, cancellationToken);
            if (AddRaftVoterResponse.ApiKey == apiKey)
                return AddRaftVoterResponse.FromReaderAsync(version, reader, cancellationToken);
            if (AllocateProducerIdsResponse.ApiKey == apiKey)
                return AllocateProducerIdsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (AlterClientQuotasResponse.ApiKey == apiKey)
                return AlterClientQuotasResponse.FromReaderAsync(version, reader, cancellationToken);
            if (AlterConfigsResponse.ApiKey == apiKey)
                return AlterConfigsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (AlterPartitionReassignmentsResponse.ApiKey == apiKey)
                return AlterPartitionReassignmentsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (AlterPartitionResponse.ApiKey == apiKey)
                return AlterPartitionResponse.FromReaderAsync(version, reader, cancellationToken);
            if (AlterReplicaLogDirsResponse.ApiKey == apiKey)
                return AlterReplicaLogDirsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (AlterUserScramCredentialsResponse.ApiKey == apiKey)
                return AlterUserScramCredentialsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ApiVersionsResponse.ApiKey == apiKey)
                return ApiVersionsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (AssignReplicasToDirsResponse.ApiKey == apiKey)
                return AssignReplicasToDirsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (BeginQuorumEpochResponse.ApiKey == apiKey)
                return BeginQuorumEpochResponse.FromReaderAsync(version, reader, cancellationToken);
            if (BrokerHeartbeatResponse.ApiKey == apiKey)
                return BrokerHeartbeatResponse.FromReaderAsync(version, reader, cancellationToken);
            if (BrokerRegistrationResponse.ApiKey == apiKey)
                return BrokerRegistrationResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ConsumerGroupDescribeResponse.ApiKey == apiKey)
                return ConsumerGroupDescribeResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ConsumerGroupHeartbeatResponse.ApiKey == apiKey)
                return ConsumerGroupHeartbeatResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ControlledShutdownResponse.ApiKey == apiKey)
                return ControlledShutdownResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ControllerRegistrationResponse.ApiKey == apiKey)
                return ControllerRegistrationResponse.FromReaderAsync(version, reader, cancellationToken);
            if (CreateAclsResponse.ApiKey == apiKey)
                return CreateAclsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (CreateDelegationTokenResponse.ApiKey == apiKey)
                return CreateDelegationTokenResponse.FromReaderAsync(version, reader, cancellationToken);
            if (CreatePartitionsResponse.ApiKey == apiKey)
                return CreatePartitionsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (CreateTopicsResponse.ApiKey == apiKey)
                return CreateTopicsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DeleteAclsResponse.ApiKey == apiKey)
                return DeleteAclsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DeleteGroupsResponse.ApiKey == apiKey)
                return DeleteGroupsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DeleteRecordsResponse.ApiKey == apiKey)
                return DeleteRecordsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DeleteShareGroupStateResponse.ApiKey == apiKey)
                return DeleteShareGroupStateResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DeleteTopicsResponse.ApiKey == apiKey)
                return DeleteTopicsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DescribeAclsResponse.ApiKey == apiKey)
                return DescribeAclsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DescribeClientQuotasResponse.ApiKey == apiKey)
                return DescribeClientQuotasResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DescribeClusterResponse.ApiKey == apiKey)
                return DescribeClusterResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DescribeConfigsResponse.ApiKey == apiKey)
                return DescribeConfigsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DescribeDelegationTokenResponse.ApiKey == apiKey)
                return DescribeDelegationTokenResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DescribeGroupsResponse.ApiKey == apiKey)
                return DescribeGroupsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DescribeLogDirsResponse.ApiKey == apiKey)
                return DescribeLogDirsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DescribeProducersResponse.ApiKey == apiKey)
                return DescribeProducersResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DescribeQuorumResponse.ApiKey == apiKey)
                return DescribeQuorumResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DescribeTopicPartitionsResponse.ApiKey == apiKey)
                return DescribeTopicPartitionsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DescribeTransactionsResponse.ApiKey == apiKey)
                return DescribeTransactionsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (DescribeUserScramCredentialsResponse.ApiKey == apiKey)
                return DescribeUserScramCredentialsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ElectLeadersResponse.ApiKey == apiKey)
                return ElectLeadersResponse.FromReaderAsync(version, reader, cancellationToken);
            if (EndQuorumEpochResponse.ApiKey == apiKey)
                return EndQuorumEpochResponse.FromReaderAsync(version, reader, cancellationToken);
            if (EndTxnResponse.ApiKey == apiKey)
                return EndTxnResponse.FromReaderAsync(version, reader, cancellationToken);
            if (EnvelopeResponse.ApiKey == apiKey)
                return EnvelopeResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ExpireDelegationTokenResponse.ApiKey == apiKey)
                return ExpireDelegationTokenResponse.FromReaderAsync(version, reader, cancellationToken);
            if (FetchResponse.ApiKey == apiKey)
                return FetchResponse.FromReaderAsync(version, reader, cancellationToken);
            if (FetchSnapshotResponse.ApiKey == apiKey)
                return FetchSnapshotResponse.FromReaderAsync(version, reader, cancellationToken);
            if (FindCoordinatorResponse.ApiKey == apiKey)
                return FindCoordinatorResponse.FromReaderAsync(version, reader, cancellationToken);
            if (GetTelemetrySubscriptionsResponse.ApiKey == apiKey)
                return GetTelemetrySubscriptionsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (HeartbeatResponse.ApiKey == apiKey)
                return HeartbeatResponse.FromReaderAsync(version, reader, cancellationToken);
            if (IncrementalAlterConfigsResponse.ApiKey == apiKey)
                return IncrementalAlterConfigsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (InitializeShareGroupStateResponse.ApiKey == apiKey)
                return InitializeShareGroupStateResponse.FromReaderAsync(version, reader, cancellationToken);
            if (InitProducerIdResponse.ApiKey == apiKey)
                return InitProducerIdResponse.FromReaderAsync(version, reader, cancellationToken);
            if (JoinGroupResponse.ApiKey == apiKey)
                return JoinGroupResponse.FromReaderAsync(version, reader, cancellationToken);
            if (LeaderAndIsrResponse.ApiKey == apiKey)
                return LeaderAndIsrResponse.FromReaderAsync(version, reader, cancellationToken);
            if (LeaveGroupResponse.ApiKey == apiKey)
                return LeaveGroupResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ListClientMetricsResourcesResponse.ApiKey == apiKey)
                return ListClientMetricsResourcesResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ListGroupsResponse.ApiKey == apiKey)
                return ListGroupsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ListOffsetsResponse.ApiKey == apiKey)
                return ListOffsetsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ListPartitionReassignmentsResponse.ApiKey == apiKey)
                return ListPartitionReassignmentsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ListTransactionsResponse.ApiKey == apiKey)
                return ListTransactionsResponse.FromReaderAsync(version, reader, cancellationToken);
            if (MetadataResponse.ApiKey == apiKey)
                return MetadataResponse.FromReaderAsync(version, reader, cancellationToken);
            if (OffsetCommitResponse.ApiKey == apiKey)
                return OffsetCommitResponse.FromReaderAsync(version, reader, cancellationToken);
            if (OffsetDeleteResponse.ApiKey == apiKey)
                return OffsetDeleteResponse.FromReaderAsync(version, reader, cancellationToken);
            if (OffsetFetchResponse.ApiKey == apiKey)
                return OffsetFetchResponse.FromReaderAsync(version, reader, cancellationToken);
            if (OffsetForLeaderEpochResponse.ApiKey == apiKey)
                return OffsetForLeaderEpochResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ProduceResponse.ApiKey == apiKey)
                return ProduceResponse.FromReaderAsync(version, reader, cancellationToken);
            if (PushTelemetryResponse.ApiKey == apiKey)
                return PushTelemetryResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ReadShareGroupStateResponse.ApiKey == apiKey)
                return ReadShareGroupStateResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ReadShareGroupStateSummaryResponse.ApiKey == apiKey)
                return ReadShareGroupStateSummaryResponse.FromReaderAsync(version, reader, cancellationToken);
            if (RemoveRaftVoterResponse.ApiKey == apiKey)
                return RemoveRaftVoterResponse.FromReaderAsync(version, reader, cancellationToken);
            if (RenewDelegationTokenResponse.ApiKey == apiKey)
                return RenewDelegationTokenResponse.FromReaderAsync(version, reader, cancellationToken);
            if (SaslAuthenticateResponse.ApiKey == apiKey)
                return SaslAuthenticateResponse.FromReaderAsync(version, reader, cancellationToken);
            if (SaslHandshakeResponse.ApiKey == apiKey)
                return SaslHandshakeResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ShareAcknowledgeResponse.ApiKey == apiKey)
                return ShareAcknowledgeResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ShareFetchResponse.ApiKey == apiKey)
                return ShareFetchResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ShareGroupDescribeResponse.ApiKey == apiKey)
                return ShareGroupDescribeResponse.FromReaderAsync(version, reader, cancellationToken);
            if (ShareGroupHeartbeatResponse.ApiKey == apiKey)
                return ShareGroupHeartbeatResponse.FromReaderAsync(version, reader, cancellationToken);
            if (StopReplicaResponse.ApiKey == apiKey)
                return StopReplicaResponse.FromReaderAsync(version, reader, cancellationToken);
            if (SyncGroupResponse.ApiKey == apiKey)
                return SyncGroupResponse.FromReaderAsync(version, reader, cancellationToken);
            if (TxnOffsetCommitResponse.ApiKey == apiKey)
                return TxnOffsetCommitResponse.FromReaderAsync(version, reader, cancellationToken);
            if (UnregisterBrokerResponse.ApiKey == apiKey)
                return UnregisterBrokerResponse.FromReaderAsync(version, reader, cancellationToken);
            if (UpdateFeaturesResponse.ApiKey == apiKey)
                return UpdateFeaturesResponse.FromReaderAsync(version, reader, cancellationToken);
            if (UpdateMetadataResponse.ApiKey == apiKey)
                return UpdateMetadataResponse.FromReaderAsync(version, reader, cancellationToken);
            if (UpdateRaftVoterResponse.ApiKey == apiKey)
                return UpdateRaftVoterResponse.FromReaderAsync(version, reader, cancellationToken);
            if (VoteResponse.ApiKey == apiKey)
                return VoteResponse.FromReaderAsync(version, reader, cancellationToken);
            if (WriteShareGroupStateResponse.ApiKey == apiKey)
                return WriteShareGroupStateResponse.FromReaderAsync(version, reader, cancellationToken);
            if (WriteTxnMarkersResponse.ApiKey == apiKey)
                return WriteTxnMarkersResponse.FromReaderAsync(version, reader, cancellationToken);
            throw new ArgumentException($"There is no response message with api key {apiKey}");
        }
    }
}
